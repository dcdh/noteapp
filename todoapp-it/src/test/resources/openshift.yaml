kind: Template
apiVersion: v1
metadata:
  name: wineforex-core-api
objects:
# role binding (view pour le service account default: permettre d'effectuer les requetes rest concernant le deployment config)
- apiVersion: authorization.openshift.io/v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: view
  roleRef:
    name: view
  subjects:
  - kind: ServiceAccount
    name: default
# mongo write event store database (version ephemere) + rest
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: eventstore-database-rest
    name: eventstore-database-rest
  spec:
    port:
      targetPort: 3000
    to:
      kind: Service
      name: eventstore-database
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: mongodb://{.spec.clusterIP}:{.spec.ports[?(.name=="mongo")].port}
    name: eventstore-database
  spec:
    ports:
    - name: mongo
      nodePort: 0
      port: 27017
      protocol: TCP
      targetPort: 27017
    - name: mongo-rest
      nodePort: 0
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      name: eventstore-database
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: 'true'
    labels:
      app: eventstore-database
    name: eventstore-database
  spec:
    replicas: 1
    selector:
      name: eventstore-database
    triggers:
    - type: ConfigChange
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: eventstore-database
      spec:
        containers:
        - capabilities: {}
          env:
          - name: MONGODB_USER
            value: ${MONGODB_USER}
          - name: MONGODB_PASSWORD
            value: ${MONGODB_PASSWORD}
          - name: MONGODB_ADMIN_PASSWORD
            value: ${MONGODB_ADMIN_PASSWORD}
          - name: MONGODB_DATABASE
            value: ${MONGODB_DATABASE}
          image: centos/mongodb-36-centos7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - mongo 127.0.0.1:27017/$(MONGODB_DATABASE) -u $(MONGODB_USER) -p $(MONGODB_PASSWORD)
                --eval="quit()"
            initialDelaySeconds: 3
            timeoutSeconds: 1
          resources:
            limits:
              memory: 256Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: "/dev/termination-log"
          volumeMounts:
          - mountPath: "/var/lib/mongodb/data"
            name: eventstore-database-data
        - name: eventstore-database-rest
          env:
          - name: ME_CONFIG_DBSTRING
            value: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@localhost:27017/${MONGODB_DATABASE}
          - name: ME_CONFIG_READONLY
            value: y
          image: linuxenko/mongo-rest
          ports:
          - containerPort: 3000
            protocol: TCP
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - emptyDir:
            medium: ''
          name: eventstore-database-data
# solr
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: solr
    name: solr
  spec:
    ports:
    - name: 8983-tcp
      port: 8983
      protocol: TCP
      targetPort: 8983
    selector:
      app: solr
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: solr
    name: solr
  spec:
    port:
      targetPort: 8983-tcp
    to:
      kind: Service
      name: solr
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: solr
    name: solr
  spec:
    replicas: 1
    selector:
      app: solr
    triggers:
    - type: ConfigChange
    strategy:
      activeDeadlineSeconds: 21600
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
        post:
          failurePolicy: Retry
          execNewPod:
            containerName: tools
            env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            command: ["sh", "-c", "curl -X GET -G http://solr.$(KUBERNETES_NAMESPACE).svc:8983/solr/admin/cores -d action=CREATE -d name=mycores -d collection=my_collection -d configSet=_default"]
      type: Rolling
    template:
      metadata:
        labels:
          app: solr
      spec:
        containers:
        - image: giantswarm/tiny-tools
          name: tools
          command:
          - tail
          - '-f'
          - /dev/null
        - image: solr:7.4.0-alpine
          imagePullPolicy: Always
          name: solr
          ports:
          - containerPort: 8983
            protocol: TCP
          readinessProbe:
            tcpSocket:
              port: 8983
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 8983
            initialDelaySeconds: 15
            periodSeconds: 20
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: "/opt/solr/server/solr/mycores"
            name: solr-data
          - mountPath: "/opt/solr/server/logs"
            name: solr-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir:
            medium: ''
          name: solr-data
        - emptyDir:
            medium: ''
          name: solr-log
# todoapp-write
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: todoapp-write
    name: todoapp-write
  spec:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: todoapp-write
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: todoapp-write
    name: todoapp-write
  spec:
    ports:
    - name: todoapp-write
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      name: todoapp-write
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: todoapp-write
    name: todoapp-write
    annotations:
  spec:
    replicas: 1
    selector:
      name: todoapp-write
    triggers:
    - type: ConfigChange
    template:
      metadata:
        labels:
          name: todoapp-write
      spec:
        initContainers:
        - name: wait-for-eventstore-database-pod
          image: giantswarm/tiny-tools
          command: ["sh", "-c", "while `curl -s --cacert /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt --header \"Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" https://openshift.default.svc.cluster.local/oapi/v1/namespaces/$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)/deploymentconfigs/eventstore-database | jq \".status.availableReplicas == 0\"` ; do echo \"waiting for eventstore-database pod\"; sleep 2; done; exit 0;"]
        - name: wait-for-solr-pod
          image: giantswarm/tiny-tools
          command: ["sh", "-c", "while `curl -s --cacert /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt --header \"Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" https://openshift.default.svc.cluster.local/oapi/v1/namespaces/$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)/deploymentconfigs/solr | jq \".status.availableReplicas == 0\"` ; do echo \"waiting for solr pod\"; sleep 2; done; exit 0;"]
        containers:
        - image: 172.30.1.1:5000/${IMAGE_NAMESPACE_SOURCE}/todoapp-write:${PROJECT_VERSION_SOURCE}
          imagePullPolicy: IfNotPresent
          name: todoapp-write
          env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: JAVA_OPTIONS
            value: >-
              -Deventstore.username=${MONGODB_USER}
              -Deventstore.password=${MONGODB_PASSWORD}
              -Deventstore.database=${MONGODB_DATABASE}
              -Deventstore.remote-host=eventstore-database.$(KUBERNETES_NAMESPACE).svc
              -Deventstore.remote-port=27017
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/service/ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          ports:
          - containerPort: 8080
            protocol: TCP
# todoapp-search
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: todoapp-search
    name: todoapp-search
  spec:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: todoapp-search
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: todoapp-search
    name: todoapp-search
  spec:
    ports:
    - name: todoapp-search
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      name: todoapp-search
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: todoapp-search
    name: todoapp-search
    annotations:
  spec:
    replicas: 1
    selector:
      name: todoapp-search
    triggers:
    - type: ConfigChange
    template:
      metadata:
        labels:
          name: todoapp-search
      spec:
        initContainers:
        - name: wait-for-eventstore-database-pod
          image: giantswarm/tiny-tools
          command: ["sh", "-c", "while `curl -s --cacert /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt --header \"Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" https://openshift.default.svc.cluster.local/oapi/v1/namespaces/$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)/deploymentconfigs/eventstore-database | jq \".status.availableReplicas == 0\"` ; do echo \"waiting for eventstore-database pod\"; sleep 2; done; exit 0;"]
        - name: wait-for-solr-pod
          image: giantswarm/tiny-tools
          command: ["sh", "-c", "while `curl -s --cacert /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt --header \"Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" https://openshift.default.svc.cluster.local/oapi/v1/namespaces/$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)/deploymentconfigs/solr | jq \".status.availableReplicas == 0\"` ; do echo \"waiting for solr pod\"; sleep 2; done; exit 0;"]
        containers:
        - image: 172.30.1.1:5000/${IMAGE_NAMESPACE_SOURCE}/todoapp-search:${PROJECT_VERSION_SOURCE}
          imagePullPolicy: IfNotPresent
          name: todoapp-search
          env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: JAVA_OPTIONS
            value: >-
              -Deventstore.username=${MONGODB_USER}
              -Deventstore.password=${MONGODB_PASSWORD}
              -Deventstore.database=${MONGODB_DATABASE}
              -Deventstore.remote-host=eventstore-database.$(KUBERNETES_NAMESPACE).svc
              -Deventstore.remote-port=27017
              -Dsolr.baseSolrUrl=http://solr.$(KUBERNETES_NAMESPACE).svc:8983/solr/mycores
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/service/ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          ports:
          - containerPort: 8080
            protocol: TCP
parameters:
- name: MONGODB_USER
  value: devuser
- name: MONGODB_PASSWORD
  value: devpassword
- name: MONGODB_ADMIN_PASSWORD
  value: adminpassword
- name: MONGODB_DATABASE
  value: eventstoredb
- name: IMAGE_NAMESPACE_SOURCE
  value: ${image-namespace}
- name: PROJECT_VERSION_SOURCE
  value: ${project.version}
